{"version":3,"sources":["store/api/index.js","store/actions/users-actions.js","store/action-types.js","store/actions/stories-actions.js","utils/numbers-util.js","store/selectors.js","components/stories-list.js","utils/date-util.js","components/spinner.js","pages/index.js","store/actions/index.js","app.js","store/reducers/stories-reducer.js","store/reducers/users-reducer.js","store/reducers/index.js","store/reducers/loading-reducer.js","store/reducers/error-reducer.js","store/index.js","index.js"],"names":["fetchJson","url","fetch","then","response","ok","json","Error","statusText","getStoriesContent","ids","Promise","all","map","id","config","storyUrl","replace","getStoryContent","getUsers","userUrl","getUser","loadUsersByStories","stories","useCache","dispatch","usersIds","getState","a","state","usersById","users","byId","filter","userId","length","type","api","payload","message","loadUsers","Array","from","reduce","story","by","add","Set","getUsersByStories","loadUsersBySelectedStories","selectedStories","loadTopStories","storiesIds","topStoriesUrl","selectRandomStories","selectedStoriesIds","count","maxValue","keys","set","size","Math","round","random","randomSetOfNumbers","storiesCount","index","loadSelectedStoriesContent","cachedStories","cached","storyId","storiesToShowSelector","usersByIdSelector","actions","key","className","timestamp","time","Date","toLocaleString","href","title","score","karma","getKarma","role","isLoadingSelector","some","action","loading","errorMessageSelector","error","createErrorMessageSelector","mapDispatchToProps","loadRandomTopStories","resolve","setTimeout","connect","isLoading","errorMessage","useEffect","onClickTryAgain","useCallback","onClick","App","initialState","getSelectedStories","storiesById","sort","b","combineReducers","matches","exec","requestName","requestState","forEach","user","middlewares","thunk","store","createStore","reducers","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bb27af1.chunk.js","sourcesContent":["import config from '../../config.json';\n\nfunction fetchJson(url) {\n    return fetch(url)\n        .then((response) => {\n            if (response.ok) {\n                return response.json();\n            }\n            throw new Error(response.statusText);\n        })\n}\n\n// region Stories\n\nexport function getTopStories() {\n    return fetchJson(config.topStoriesUrl);\n}\n\nexport function getStoryContent(id) {\n    return fetchJson(config.storyUrl.replace('{id}', id));\n}\n\nexport function getStoriesContent(ids) {\n    return Promise.all(ids.map((id) => getStoryContent(id)));\n}\n\n// endregion\n\n// region Users\n\nexport function getUser(id) {\n    return fetchJson(config.userUrl.replace('{id}', id));\n}\n\nexport function getUsers(ids) {\n    return Promise.all(ids.map((id) => getUser(id)))\n}\n\n// endregion\n","import {\n    GET_USERS_FAILURE,\n    GET_USERS_REQUEST,\n    GET_USERS_SUCCESS,\n} from '../action-types';\nimport * as api from '../api';\n\nconst getUsersByStories = (stories) => Array.from(stories.reduce((users, story) => story?.by && users.add(story.by), new Set()));\n\nexport const loadUsers = (usersIds, useCache) => async (dispatch, getState) => {\n    const state = getState();\n\n    if (useCache) {\n        const usersById = state.users.byId;\n        usersIds = usersIds.filter((userId) => !usersById[userId]);\n    }\n\n    if (usersIds.length) {\n        dispatch({ type: GET_USERS_REQUEST });\n\n        let users;\n        try {\n            users = await api.getUsers(usersIds);\n        } catch (e) {\n            dispatch({ type: GET_USERS_FAILURE, payload: { message: `Error loading users data` } });\n            return;\n        }\n\n        dispatch({ type: GET_USERS_SUCCESS, payload: { users } });\n    }\n}\n\nexport const loadUsersByStories = (stories, useCache) => (dispatch) =>\n    dispatch(loadUsers(getUsersByStories(stories), useCache));\n\nexport const loadUsersBySelectedStories = (useCache) => (dispatch, getState) =>\n    dispatch(loadUsersByStories(getState().stories.selectedStories, useCache));\n","export const GET_TOP_STORIES_REQUEST = 'GET_TOP_STORIES_REQUEST';\nexport const GET_TOP_STORIES_SUCCESS = 'GET_TOP_STORIES_SUCCESS';\nexport const GET_TOP_STORIES_FAILURE = 'GET_TOP_STORIES_FAILURE';\n\nexport const SELECT_STORIES = 'SELECT_STORIES';\n\nexport const GET_STORIES_CONTENT_REQUEST = 'GET_STORIES_CONTENT_REQUEST';\nexport const GET_STORIES_CONTENT_SUCCESS = 'GET_STORIES_CONTENT_SUCCESS';\nexport const GET_STORIES_CONTENT_FAILURE = 'GET_STORIES_CONTENT_FAILURE';\n\nexport const GET_USERS_REQUEST = 'GET_USERS_REQUEST';\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\nexport const GET_USERS_FAILURE = 'GET_USERS_FAILURE';\n\nexport const GET_RANDOM_STORIES_REQUEST = 'GET_RANDOM_STORIES_REQUEST';\nexport const GET_RANDOM_STORIES_SUCCESS = 'GET_RANDOM_STORIES_SUCCESS';\n","import {\n    GET_STORIES_CONTENT_FAILURE,\n    GET_STORIES_CONTENT_REQUEST, GET_STORIES_CONTENT_SUCCESS,\n    GET_TOP_STORIES_FAILURE,\n    GET_TOP_STORIES_REQUEST,\n    GET_TOP_STORIES_SUCCESS,\n    SELECT_STORIES\n} from '../action-types';\nimport * as api from '../api';\nimport { randomSetOfNumbers } from '../../utils/numbers-util';\nimport config from '../../config.json';\n\nexport const loadTopStories = (useCache) => async (dispatch, getState) => {\n    const state = getState();\n\n    let storiesIds =\n        useCache\n            ? state.stories.storiesIds\n            : null;\n\n    if (!storiesIds?.length) {\n        dispatch({ type: GET_TOP_STORIES_REQUEST });\n\n        try {\n            storiesIds = await api.getTopStories();\n        } catch (e) {\n            dispatch({ type: GET_TOP_STORIES_FAILURE, payload: { message: `Error loading topStories list` } });\n            return;\n        }\n\n        dispatch({ type: GET_TOP_STORIES_SUCCESS, payload: { storiesIds } });\n    }\n};\n\nexport const selectRandomStories = () => (dispatch, getState) => {\n    const state = getState();\n    const storiesIds = state.stories.storiesIds;\n    if (storiesIds.length) {\n        const selectedStoriesIds = randomSetOfNumbers(config.storiesCount, storiesIds.length - 1).map((index) => storiesIds[index]);\n        dispatch({ type: SELECT_STORIES, payload: { selectedStoriesIds } });\n    }\n}\n\nexport const loadSelectedStoriesContent = (useCache) => async (dispatch, getState) => {\n    const state = getState();\n\n    const cachedStories = state.stories.cached;\n    const selectedStoriesIds = state.stories.selectedStoriesIds;\n\n    const storiesIdsToLoad = useCache\n        ? selectedStoriesIds.filter((storyId) => !cachedStories[storyId])\n        : selectedStoriesIds;\n\n    if (storiesIdsToLoad.length) {\n        dispatch({ type: GET_STORIES_CONTENT_REQUEST });\n\n        let stories;\n        try {\n            stories = await api.getStoriesContent(selectedStoriesIds);\n        } catch (e) {\n            dispatch({ type: GET_STORIES_CONTENT_FAILURE, payload: { message: `Error loading stories content` } });\n            return;\n        }\n\n        dispatch({ type: GET_STORIES_CONTENT_SUCCESS, payload: { stories } });\n    }\n};\n","export function randomSetOfNumbers(count, maxValue) {\n    if (count >= maxValue) {\n        return Array.from(Array(maxValue).keys());\n    }\n\n    const set = new Set();\n    while (set.size < count) {\n        set.add(Math.round(Math.random() * maxValue))\n    }\n    return Array.from(set);\n}\n","export const createLoadingSelector = (actions) => (state) => {\n    return actions\n        .some((action) => state.loading[action]);\n};\n\nexport const createErrorMessageSelector = (actions) => (state) => {\n    return actions\n        .map((action) => state.error[action])\n        .filter((action) => action)[0] || '';\n};\n\nexport const storiesToShowSelector = (state) => state.stories.selectedStories;\n\nexport const usersByIdSelector = (state) => state.users.byId;\n","import React from 'react';\n\nimport { timestampToDate } from '../utils/date-util';\n\nexport default ({ stories, usersById }) => {\n    const getKarma = (userId) => usersById[userId]?.karma;\n\n    return <ul>\n        {stories.map((story) => (\n            <li key={story.id}>\n                <span className=\"time mr-3\">{timestampToDate(story.time)}</span>\n                {story.url\n                    ? <a href={story.url}>{story.title}</a>\n                    : story.title}\n                <span className=\"score ml-1\">{story.score}</span>\n                <span className=\"author ml-3\">by {story.by}</span>\n                <span className=\"karma ml-1\">{getKarma(story.by)}</span>\n            </li>\n        ))}\n    </ul>\n}\n","export function timestampToDate(timestamp) {\n    return new Date(timestamp * 1000).toLocaleString();\n}\n","import React from 'react';\n\nexport default () => (\n    <div className=\"d-flex flex-grow-1 justify-content-center align-items-center\">\n        <div className=\"spinner-border text-primary pl-1\" role=\"status\">Loading...</div>\n    </div>\n)\n\n","import React, { useCallback, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { loadRandomTopStories } from '../store/actions';\nimport {\n    createLoadingSelector,\n    createErrorMessageSelector,\n    storiesToShowSelector,\n    usersByIdSelector,\n} from '../store/selectors';\n\nimport StoriesList from '../components/stories-list';\nimport Spinner from '../components/spinner';\n\nconst isLoadingSelector = createLoadingSelector(['GET_RANDOM_STORIES']);\nconst errorMessageSelector = createErrorMessageSelector(['GET_TOP_STORIES', 'GET_STORIES_CONTENT', 'GET_USERS']);\n\nconst mapStateToProps = (state) => ({\n    isLoading: isLoadingSelector(state),\n    errorMessage: errorMessageSelector(state),\n    stories: storiesToShowSelector(state),\n    usersById: usersByIdSelector(state),\n});\n\nconst mapDispatchToProps = { loadRandomTopStories };\n\nexport default connect(mapStateToProps, mapDispatchToProps)\n(({\n      isLoading,\n      errorMessage,\n      stories,\n      usersById,\n      loadRandomTopStories,\n  }) => {\n\n    useEffect(() => loadRandomTopStories(), [loadRandomTopStories]);\n\n    const onClickTryAgain = useCallback(() => loadRandomTopStories(true), [loadRandomTopStories]);\n\n    return (\n        <div className=\"container d-flex flex-column h-100 page-index\">\n            {isLoading\n            && <Spinner/>}\n\n            {errorMessage\n            && <div className=\"alert alert-danger\">{errorMessage}</div>}\n\n            {!isLoading\n            && <div className=\"text-right\">\n                <button type=\"button\"\n                        className=\"btn btn-primary\"\n                        onClick={onClickTryAgain}\n                >\n                    Try again\n                </button>\n            </div>}\n\n            {!isLoading\n            && !errorMessage\n            && <StoriesList stories={stories} usersById={usersById}/>}\n        </div>\n    )\n})","import {\n    GET_RANDOM_STORIES_REQUEST,\n    GET_RANDOM_STORIES_SUCCESS,\n} from '../action-types';\nimport * as users from './users-actions';\nimport * as stories from './stories-actions';\n\nexport const loadRandomTopStories = (useCache) => async (dispatch) => {\n    dispatch({ type: GET_RANDOM_STORIES_REQUEST });\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    dispatch(stories.loadTopStories(useCache))\n        .then(() => dispatch(stories.selectRandomStories()))\n        .then(() => dispatch(stories.loadSelectedStoriesContent(useCache)))\n        .then(() => dispatch(users.loadUsersBySelectedStories(useCache)))\n        .then(() => dispatch({ type: GET_RANDOM_STORIES_SUCCESS }));\n}\n","import React from 'react';\n\nimport IndexPage from './pages/index';\n\nfunction App() {\n    return (\n        <div className=\"App d-flex flex-column h-100\">\n            <header>\n                <div className=\"container\">\n                    <h1>Hacker Stories</h1>\n                </div>\n            </header>\n            <div className=\"flex-grow-1\">\n                <IndexPage/>\n            </div>\n            <footer>\n                <div className=\"container text-center\">\n                    &copy; 2020 *****\n                </div>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import {\n    GET_TOP_STORIES_SUCCESS,\n    SELECT_STORIES,\n    GET_STORIES_CONTENT_SUCCESS,\n} from '../action-types';\n\nconst initialState = {\n    storiesIds: [],\n    selectedStoriesIds: [],\n    selectedStories: [],\n    cached: {},\n};\n\nfunction getSelectedStories(storiesIds, storiesById) {\n    return storiesIds\n        .map((storyId) => storiesById[storyId])\n        .filter((story) => story)\n        .sort((a, b) => a.score - b.score);\n}\n\nexport default (state = initialState, action) => {\n    const payload = action.payload || {};\n\n    switch (action.type) {\n        case GET_TOP_STORIES_SUCCESS:\n            const { storiesIds } = payload;\n\n            return {\n                ...state,\n                storiesIds,\n            };\n\n        case SELECT_STORIES: {\n            const { selectedStoriesIds } = payload;\n\n            const selectedStories = getSelectedStories(selectedStoriesIds, state.cached);\n\n            return {\n                ...state,\n                selectedStoriesIds,\n                selectedStories,\n            };\n        }\n\n        case GET_STORIES_CONTENT_SUCCESS: {\n            const { stories } = payload;\n\n            const storiesById = {};\n            stories.forEach((story) => storiesById[story.id] = story);\n\n            const cached = { ...state.cached, ...storiesById };\n\n            const selectedStories = getSelectedStories(state.selectedStoriesIds, cached);\n\n            return {\n                ...state,\n                selectedStories,\n                cached,\n            };\n        }\n\n        default:\n    }\n\n    return state;\n};\n","import { GET_USERS_SUCCESS } from '../action-types';\n\nconst initialState = {\n    byId: {},\n};\n\nexport default (state = initialState, action) => {\n    const payload = action.payload || {};\n\n    switch (action.type) {\n        case GET_USERS_SUCCESS:\n            const { users } = payload;\n            const usersById = {};\n            users.forEach((user) => usersById[user.id] = user);\n\n            return {\n                ...state,\n                byId: { ...state.byId, ...usersById },\n            };\n\n        default:\n    }\n\n    return state;\n};\n","import { combineReducers } from 'redux'\n\nimport loadingReducer from './loading-reducer'\nimport errorReducer from './error-reducer'\n\nimport storiesReducer from './stories-reducer';\nimport usersReducer from './users-reducer';\n\nexport default combineReducers({\n    loading: loadingReducer,\n    error: errorReducer,\n\n    stories: storiesReducer,\n    users: usersReducer,\n});\n","export default (state = {}, action) => {\n  const { type } = action;\n  const matches = /(.*)_(REQUEST|SUCCESS|FAILURE)/.exec(type);\n\n  // not a *_REQUEST / *_SUCCESS /  *_FAILURE actions, so we ignore them\n  if (!matches) return state;\n\n  const [, requestName, requestState] = matches;\n  return {\n    ...state,\n    // Store whether a request is happening at the moment or not\n    // e.g. will be true when receiving GET_TODOS_REQUEST\n    //      and false when receiving GET_TODOS_SUCCESS / GET_TODOS_FAILURE\n    [requestName]: requestState === 'REQUEST',\n  };\n}\n","export default (state = {}, action) => {\n  const { type, payload } = action;\n  const matches = /(.*)_(REQUEST|FAILURE)/.exec(type);\n\n  // not a *_REQUEST / *_FAILURE actions, so we ignore them\n  if (!matches) return state;\n\n  const [, requestName, requestState] = matches;\n  return {\n    ...state,\n    // Store errorMessage\n    // e.g. stores errorMessage when receiving GET_TODOS_FAILURE\n    //      else clear errorMessage when receiving GET_TODOS_REQUEST\n    [requestName]: requestState === 'FAILURE' ? payload.message : '',\n  };\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport reducers from './reducers';\n\nconst middlewares = [thunk];\n\nif (process.env.NODE_ENV === `development`) {\n    middlewares.push(logger);\n}\n\nconst store = createStore(reducers, {}, composeWithDevTools(applyMiddleware(...middlewares),));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport './index.scss';\nimport App from './app';\n\nimport store from './store'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}